import logging
import os
import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞ –±–∞–∑—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_tables():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            chat_id BIGINT,
            task TEXT
        )
    """)
    await conn.close()

async def add_task(chat_id, task):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO tasks (chat_id, task) VALUES ($1, $2)", chat_id, task)
    await conn.close()

async def get_tasks(chat_id):
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT task FROM tasks WHERE chat_id = $1", chat_id)
    await conn.close()
    return [r['task'] for r in rows]

async def delete_task(chat_id, task):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("DELETE FROM tasks WHERE chat_id = $1 AND task = $2", chat_id, task)
    await conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    chat_id = message.chat.id
    await add_task(chat_id, "–ü–æ–ª–∏—Ç–∏ –∫–∞–≤—É")
    await add_task(chat_id, "–ü–æ–º–∏–π –±–∞—Ä–Ω—É —Å—Ç—ñ–π–∫—É")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É GRECO.")
    scheduler.add_job(send_weekly_tasks, CronTrigger(day_of_week='mon', hour=11, minute=30), args=[chat_id])
    await message.answer("üìÖ –©–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 11:30 —è –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∑–∞–¥–∞—á—ñ –¥–ª—è –±–∞—Ä—É —Ç–∞ –∑–∞–ª—É.")

# –ö–æ–º–∞–Ω–¥–∞ /task
@dp.message_handler(commands=["task"])
async def list_tasks(message: types.Message):
    user_tasks = await get_tasks(message.chat.id)
    if not user_tasks:
        await message.answer("‚úÖ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á!")
        return
    buttons = [InlineKeyboardButton(text=f"‚úÖ {t}", callback_data=f"done:{t}") for t in user_tasks]
    markup = InlineKeyboardMarkup().add(*buttons)
    await message.answer("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("done:"))
async def mark_done(callback_query: types.CallbackQuery):
    task = callback_query.data.split(":", 1)[1]
    chat_id = callback_query.message.chat.id
    await delete_task(chat_id, task)
    await bot.answer_callback_query(callback_query.id, text=f"–ó–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞: {task}")
    await bot.send_message(chat_id, f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {task}")

# –ó–∞–¥–∞—á–∏ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º
async def send_weekly_tasks(chat_id):
    await bot.send_message(chat_id, "üë®‚Äçüç≥ –û–§–Ü–¶–Ü–ê–ù–¢–ò: üßÇ –°–ø–µ—Ü–æ–≤–Ω–∏–∫–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ?")
    await bot.send_message(chat_id, "üç∏ –ë–ê–†–ú–ï–ù–ò: üßº –§—ñ–ª—å—Ç—Ä–∏ —á–∏—Å—Ç—ñ?")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(dp):
    await create_tables()
    scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
