
import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

API_TOKEN = os.getenv("BOT_TOKEN")
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

tasks = {}
scheduler = AsyncIOScheduler()
scheduler.start()

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    chat_id = message.chat.id
    tasks[chat_id] = ["–ü–æ–ª–∏—Ç–∏ –∫–∞–≤—É", "–ü–æ–º–∏–π –±–∞—Ä–Ω—É —Å—Ç—ñ–π–∫—É"]
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É GRECO.")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    scheduler.add_job(send_weekly_tasks, CronTrigger(day_of_week='mon', hour=11, minute=30), args=[chat_id])
    await message.answer("üìÖ –©–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 11:30 —è –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∑–∞–¥–∞—á—ñ –¥–ª—è –±–∞—Ä—É —Ç–∞ –∑–∞–ª—É.")

@dp.message_handler(commands=["task"])
async def list_tasks(message: types.Message):
    user_tasks = tasks.get(message.chat.id, [])
    if not user_tasks:
        await message.answer("‚úÖ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á!")
        return
    buttons = [InlineKeyboardButton(text=f"‚úÖ {t}", callback_data=f"done:{i}") for i, t in enumerate(user_tasks)]
    markup = InlineKeyboardMarkup().add(*buttons)
    await message.answer("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("done:"))
async def mark_done(callback_query: types.CallbackQuery):
    idx = int(callback_query.data.split(":")[1])
    chat_id = callback_query.message.chat.id
    if chat_id in tasks and len(tasks[chat_id]) > idx:
        task = tasks[chat_id].pop(idx)
        await bot.answer_callback_query(callback_query.id, text=f"–ó–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞: {task}")
        await bot.send_message(chat_id, f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {task}")
    else:
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

async def send_weekly_tasks(chat_id):
    await bot.send_message(chat_id, "üë®‚Äçüç≥ –û–§–Ü–¶–Ü–ê–ù–¢–ò: üßÇ –°–ø–µ—Ü–æ–≤–Ω–∏–∫–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ?")
    await bot.send_message(chat_id, "üç∏ –ë–ê–†–ú–ï–ù–ò: üßº –§—ñ–ª—å—Ç—Ä–∏ —á–∏—Å—Ç—ñ?")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
