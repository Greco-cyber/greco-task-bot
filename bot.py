import logging
import os
import asyncpg
import aiohttp
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime

API_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEATHER_API_KEY = "7c50670f4a42d50802416f17b95682e1"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async def create_tables():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            chat_id BIGINT,
            task TEXT
        )
    """)
    await conn.close()

# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
async def get_weather_forecast():
    lat, lon = 50.4084, 30.3654
    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&units=metric&lang=ua&appid={WEATHER_API_KEY}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            forecast_list = data["list"]

            intervals = ["10:30", "13:30", "16:30", "20:30"]
            today = datetime.now().date()
            result = []

            for entry in forecast_list:
                dt = datetime.fromtimestamp(entry["dt"])
                if dt.date() == today:
                    hour_min = dt.strftime("%H:%M")
                    if hour_min in intervals:
                        temp = round(entry["main"]["temp"])
                        desc = entry["weather"][0]["description"].capitalize()
                        result.append(f"{hour_min} ‚Äì {desc}, {temp}¬∞C")

            if not result:
                return "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
            return "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n" + "\n".join(result)

# –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
@dp.message_handler(commands=["weather"])
async def send_weather_command(message: types.Message):
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT 1 FROM tasks WHERE chat_id = $1", message.chat.id)
    if not rows:
        await conn.execute("INSERT INTO tasks (chat_id, task) VALUES ($1, $2)", message.chat.id, "weather auto")
    await conn.close()

    forecast = await get_weather_forecast()
    await message.answer(forecast)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    chat_id = message.chat.id
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO tasks (chat_id, task) VALUES ($1, $2)", chat_id, "–ü–æ–ª–∏—Ç–∏ –∫–∞–≤—É")
    await conn.close()
    await message.answer("üëã –ü—Ä–∏–≤i—Ç! –Ø –±–æ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É GRECO.")
    await message.answer("üóìÔ∏è –©–æ–ø–æ–Ω–µ–¥i–ª–∫–∞ –æ 11:30 —è –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∑–∞–¥–∞—ái.")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@dp.message_handler(commands=["task"])
async def list_tasks(message: types.Message):
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT task FROM tasks WHERE chat_id = $1", message.chat.id)
    await conn.close()
    if not rows:
        await message.answer("‚úÖ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á!")
        return
    tasks = [r['task'] for r in rows]
    buttons = [InlineKeyboardButton(text=f"‚úÖ {t}", callback_data=f"done:{i}") for i, t in enumerate(tasks)]
    markup = InlineKeyboardMarkup().add(*buttons)
    await message.answer("üìú –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=markup)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("done:"))
async def mark_done(callback_query: types.CallbackQuery):
    idx = int(callback_query.data.split(":")[1])
    chat_id = callback_query.message.chat.id
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT task FROM tasks WHERE chat_id = $1", chat_id)
    if idx < len(rows):
        task = rows[idx]['task']
        await conn.execute("DELETE FROM tasks WHERE chat_id = $1 AND task = $2", chat_id, task)
        await bot.answer_callback_query(callback_query.id, text=f"–ó–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞: {task}")
        await bot.send_message(chat_id, f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {task}")
    else:
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    await conn.close()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
async def send_weekly_tasks():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT DISTINCT chat_id FROM tasks")
    for row in rows:
        chat_id = row['chat_id']
        await bot.send_message(chat_id, "üë®‚Äçüç≥ –û–§–Ü–¶–Ü–ê–ù–¢–ò: ü°¢ –°–ø–µ—Ü–æ–≤–Ω–∏–∫–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ?")
        await bot.send_message(chat_id, "üç∏ –ë–ê–†–ú–ï–ù–ò: üßº –§—ñ–ª—å—Ç—Ä–∏ —á–∏—Å—Ç—ñ?")
    await conn.close()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ 10:00
async def send_morning_weather():
    forecast = await get_weather_forecast()
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT DISTINCT chat_id FROM tasks")
    for row in rows:
        await bot.send_message(row['chat_id'], forecast)
    await conn.close()

# –ó–∞–ø—É—Å–∫
async def on_startup(dp):
    await create_tables()
    scheduler.add_job(send_weekly_tasks, CronTrigger(day_of_week='mon', hour=11, minute=30))
    scheduler.add_job(send_morning_weather, CronTrigger(hour=10, minute=0))
    scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
